import 'package:hive_flutter/adapters.dart';import '../../../utils/product_holder.dart';import '../../../utils/products_hive.dart';class HiveHelper {  static Future<void> init() async {    await Hive.initFlutter();    await Hive.openBox('basket');    await Hive.openBox('favourite');    Hive.registerAdapter(ProductItemsModelAdapter());  }  static Future<void> addProductToBasket(ProductHolder products) async {    var box = Hive.box('basket');    bool isBasket = true;    if (box.values.contains(products.name)) {      isBasket = false;    }    if (isBasket) {      box.put(products.id, products);    }  }  static Future<void> updateProductInBasket(ProductHolder product) async {    var box = Hive.box('basket');    if (box.containsKey(product.id)) {      box.put(product.id, product);    }  }  static Future<void> addProductToFavourite(ProductHolder productHolder) async {    var box = Hive.box('favourite');    box.put(productHolder.id, productHolder);  }  static List<ProductHolder> getAllProductsFromBasket() {    final box = Hive.box('basket');    return box.values.cast<ProductHolder>().toList();  }  static List getAllKeysProductsFromFavourite() {    final box = Hive.box('favourite');    return box.keys.toList();  }  static Future<void> deleteProductFromBasket(      ProductHolder productHolder) async {    var box = Hive.box('basket');    box.delete(productHolder.id);  }  static List<ProductHolder> getAllFavouriteProducts() {    final box = Hive.box('favourite');    return box.values.cast<ProductHolder>().toList();  }  static Future<void> deleteProductFromFavourite(      ProductHolder productHolder) async {    final box = Hive.box('favourite');    // if (box.values.contains(productHolder.id)) {    box.delete(productHolder.id);    // }  }}