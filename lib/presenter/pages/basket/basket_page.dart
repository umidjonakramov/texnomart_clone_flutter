import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:google_fonts/google_fonts.dart';import 'package:lottie/lottie.dart';import '../../../data/source/local/hive_helper.dart';import '../../../utils/basket.dart';import 'bloc/basket_bloc.dart';class BasketPage extends StatefulWidget {  const BasketPage({super.key});  @override  State<BasketPage> createState() => _BasketPageState();}class _BasketPageState extends State<BasketPage> {  final _bloc = BasketBloc();  // List<ProductHolder> data = [];  @override  void initState() {    _bloc.add(GetAllProductsFromBasketEvent());    super.initState();  }  @override  void dispose() {    _bloc.close();    super.dispose();  }  @override  Widget build(BuildContext context) {    return BlocProvider.value(      value: _bloc,      child: BlocConsumer<BasketBloc, BasketState>(        listener: (context, state) {          if (state is GetAllProductsFromBasketSate) {          }        },        builder: (context, state) {          return Scaffold(            appBar: AppBar(              automaticallyImplyLeading: false,              backgroundColor: const Color(0xFFfbc100),              title: Text('Savatcha',                  textAlign: TextAlign.start,                  style: GoogleFonts.poppins(                      fontWeight: FontWeight.w700, fontSize: 14)),            ),            body: SafeArea(              child: Padding(                padding: const EdgeInsets.all(10),                child: Builder(builder: (context) {                  if (state is GetAllProductsFromBasketSate) {                    return ListView.builder(                      itemCount: state.data.length,                      itemBuilder: (context, index) {                        if (state.data[index].count == 0) {                          // setState(() {                          state.data[index].count = 1;                          // });                        }                        bool isSaved =                            HiveHelper.getAllKeysProductsFromFavourite()                                .contains(state.data[index].id);                        // setState(() {                        state.data[index].isSaved = isSaved;                        // });                        return basketItem(                            () {                              // Navigator.push(                              //     context,                              //     MaterialPageRoute(                              //         builder: (context) => ProductDetailsPage(                              //             item: state.data[index])));                            },                            context,                            state.data[index],                            () {                              setState(() {                                state.data[index].isSaved =                                    !state.data[index].isSaved!;                                isSaved == true                                    ? HiveHelper.deleteProductFromFavourite(                                        state.data[index])                                    : HiveHelper.addProductToFavourite(                                        state.data[index]);                                print(HiveHelper.getAllFavouriteProducts()                                    .length);                              });                            },                            () {                              HiveHelper.deleteProductFromBasket(                                  state.data[index]);                              _bloc.add(GetAllProductsFromBasketEvent());                              print(                                  HiveHelper.getAllProductsFromBasket().length);                            },                            () {                              setState(() {                                state.data[index].count =                                    (state.data[index].count ?? 0) + 1;                                HiveHelper.updateProductInBasket(                                    state.data[index]);                              });                            },                            () {                              setState(() {                                state.data[index].count =                                    (state.data[index].count ?? 0) - 1;                                HiveHelper.updateProductInBasket(                                    state.data[index]);                              });                            });                      },                    );                  } else {                    return Scaffold(                      body: SafeArea(                        child: Center(                          child: Lottie.asset(                            'assets/lottie/loading_circle.json',                            height: 150,                            width: 150,                          ),                        ),                      ),                    );                  }                }),              ),            ),          );        },      ),    );  }}