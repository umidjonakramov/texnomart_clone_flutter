import 'dart:async';import 'dart:typed_data';import 'dart:ui';import 'package:flutter/material.dart';import 'package:flutter_svg/flutter_svg.dart';import 'package:texnomart_clone_flutter/data/source/models/branchs/filial_model.dart';import 'package:yandex_mapkit/yandex_mapkit.dart';class ShopsLocationPage extends StatefulWidget {  final OpenedStore? data;  const ShopsLocationPage({this.data, super.key});  @override  State<ShopsLocationPage> createState() => _ShopsLocationPageState();}class _ShopsLocationPageState extends State<ShopsLocationPage> {  final mapControllerCompleter = Completer<YandexMapController>();  final List<MapObject> mapObjects = [];  Future<void> _moveToCurrentLocation(double lat, double lon) async {    (await mapControllerCompleter.future).moveCamera(      animation: const MapAnimation(type: MapAnimationType.linear, duration: 1),      CameraUpdate.newCameraPosition(        CameraPosition(          target: Point(            latitude: lat,            longitude: lon,          ),          zoom: 15,        ),      ),    );  }  Future<Uint8List> svgToPng(String svgString, BuildContext context) async {    final pictureInfo =        await vg.loadPicture(SvgStringLoader(svgString), context);    final image = await pictureInfo.picture.toImage(100, 100);    final byteData = await image.toByteData(format: ImageByteFormat.png);    if (byteData == null) {      throw Exception('Unable to convert SVG to PNG');    }    final pngBytes = byteData.buffer.asUint8List();    return pngBytes;  }  @override  void initState() {    _moveToCurrentLocation(        double.parse(widget.data!.lat!), double.parse(widget.data!.long!));    super.initState();  }  @override  Widget build(BuildContext context) {    return YandexMap(      onMapCreated: (controller) {        mapControllerCompleter.complete(controller);      },      zoomGesturesEnabled: true,      mapObjects: [        PlacemarkMapObject(            text:  PlacemarkText(                text: "${widget.data?.name}"                // element.name                ,                style: const PlacemarkTextStyle(                    size: 10, placement: TextStylePlacement.bottom)),            mapId: MapObjectId(widget.data!.id.toString()),            icon: PlacemarkIcon.single(PlacemarkIconStyle(                scale: 0.1,                image:                    BitmapDescriptor.fromAssetImage('assets/images/btn.png'))),            point: Point(                latitude: double.parse(widget.data!.lat!),                longitude: double.parse(widget.data!.long!)))      ],    );  }}