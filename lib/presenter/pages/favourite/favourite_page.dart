import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:google_fonts/google_fonts.dart';import 'package:lottie/lottie.dart';import '../../../data/source/local/hive_helper.dart';import '../../../utils/favourite_item.dart';import 'bloc/favourite_bloc.dart';class FavouritePage extends StatelessWidget {  const FavouritePage({super.key});  @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => FavouriteBloc()..add(GetAllFavouriteProductsEvent()),      child: BlocConsumer<FavouriteBloc, FavouriteState>(        listener: (context, state) {},        builder: (context, state) {          if (state is GetAllFavouriteProductsState) {            print(state.data.length);            return Scaffold(              appBar: AppBar(                automaticallyImplyLeading: false,                backgroundColor: const Color(0xFFfbc100),                title: Text('Sevimlilar',                    overflow: TextOverflow.ellipsis,                    textAlign: TextAlign.start,                    style: GoogleFonts.poppins(                        fontWeight: FontWeight.w700, fontSize: 14)),              ),              body: SafeArea(                child: Padding(                  padding: const EdgeInsets.all(8.0),                  child: ListView.builder(                      itemCount: state.data.length,                      itemBuilder: (ctx, index) {                        return favouriteItem(state.data[index], () {                          HiveHelper.deleteProductFromFavourite(                              state.data[index]);                          ctx                              .read<FavouriteBloc>()                              .add(GetAllFavouriteProductsEvent());                          // ctx.read<FavouriteBloc>().add(                          //     DeleteProductToFavouriteEvent(state.data[index]));                        });                      }),                ),              ),            );          } else {            return Scaffold(              body: Column(                children: [                  SizedBox(width: double.infinity,),                  Padding(                    padding: const EdgeInsets.only(top: 28),                    child: LinearProgressIndicator(),                  )                ],              )            );          }        },      ),    );  }}