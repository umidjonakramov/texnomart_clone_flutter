import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:google_fonts/google_fonts.dart';import 'package:lottie/lottie.dart';import '../../../utils/product_holder.dart';import '../../../utils/product_item.dart';import '../product_detail/product_details_page.dart';import 'bloc/products_bloc.dart';class ProductsPage extends StatefulWidget {  final String title;  final String slug;  const ProductsPage(this.title, this.slug, {super.key});  @override  State<ProductsPage> createState() => _ProductsPageState();}class _ProductsPageState extends State<ProductsPage> {  final _bloc = ProductsBloc();  List<ProductHolder> products = [];  @override  void initState() {    _bloc.add(GetAllProductsEvent(widget.slug));    super.initState();  }  @override  Widget build(BuildContext context) {    return BlocProvider.value(      value: _bloc,      child: BlocConsumer<ProductsBloc, ProductsState>(        listener: (context, state) {          if (state is GetAllProductsState) {            state.data.data?.products?.forEach((element) {              products.add(ProductHolder(                  element.id,                  element.name,                  element.image,                  element.saleMonths,                  element.stickers,                  element.availability,                  element.discount,                  element.code,                  element.mainCharacters,                  element.salePrice,                  element.fSalePrice,                  element.oldPrice,                  element.fOldPrice,                  element.loanPrice,                  element.fLoanPrice,                  element.axiomMonthlyPrice,                  element.reviewsCount,                  element.reviewsAverage,                  element.allCount,                  element.brand,                  false,                  0));            });          }        },        builder: (context, state) {          if (state is GetAllProductsState) {            return Scaffold(              appBar: AppBar(                backgroundColor: const Color(0xFFfbc100),                title: Padding(                  padding: const EdgeInsets.only(right: 45),                  child: Center(child: Text(widget.title,                    textAlign: TextAlign.start,                    style: TextStyle(                        fontWeight: FontWeight.w700, fontSize: 14))),                ),              ),              body: SafeArea(                child: CustomScrollView(slivers: [                  SliverGrid(                    gridDelegate:                    const SliverGridDelegateWithFixedCrossAxisCount(                      crossAxisCount: 2,                      mainAxisSpacing: 8.0,                      crossAxisSpacing: 8.0,                    ),                    delegate: SliverChildBuilderDelegate(                          (BuildContext context, int index) {                        return productItem(products[index], () {                          Navigator.push(                              context,                              MaterialPageRoute(                                  builder: (context) =>                                      ProductDetailsPage(                                          item: products[index])));                        });                      },                      childCount: products.length,                    ),                  )                ]),              ),            );          } else if (state is LoadingState) {            return Scaffold(              body: Column(                children: [                  SizedBox(width: double.infinity,),                  Padding(                    padding: const EdgeInsets.only(top: 28.0),                    child: LinearProgressIndicator(),                  )                ],              ),            );          } else {            return const Placeholder();          }        },      ),    );  }}